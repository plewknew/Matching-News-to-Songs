# -*- coding: utf-8 -*-
"""Lyrics_NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rEpHw6tA50k3gjUZQlxHrf7Ytx9fKJcg

## Purpose

The purpose of this notebook is to display a working example of how to use Google's universal sentence encoder to compare two different strings. The general idea is to apply some basic NLP techniques with Spacy in order to increase the weights of the 'important' aspects of a sentence, then apply the sentence encoder to get a vector representation of the sentances. These sentances are later compared.

In general, there will be one news article that is inputted. This will be compared to a dataframe of songs that have already been processed by the encoder. The one with the best cosine similarity will be selected.
"""

import numpy as np
import pandas as pd
from Support_functions import nlp_weighting
from Support_functions import embed
from sklearn.metrics.pairwise import cosine_similarity

article_url = input('Please enter the URL of your Article: ')


# #First we want to import the particular article that we want
article = Article(article_url)
article.download()
article.parse()
article_text=article.text

article_text = nlp_weighting([article_text])

article_text_embed = embed([article_text[0],'temp']).iloc[0,:]

max_cos = 0
max_col = ''
for i in range(len(df_songs_political_lyrics_embed)):
    temp_cos = cosine_similarity([article_text_embed],[df_songs_political_lyrics_embed.iloc[i]])
    if temp_cos > max_cos:
        max_cos = temp_cos
        max_col = df_songs_political.iloc[i]


print('The name of the closest Song: '+str(max_col[1]))
print('The artist of the closest Song: '+str(max_col[0]))
print('The lyrics of the closest Song: \n'+str(max_col[3]))

